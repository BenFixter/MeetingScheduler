// <auto-generated />
using System;
using MeetingScheduler.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MeetingScheduler.Migrations
{
    [DbContext(typeof(MeetingSchedulerContext))]
    partial class MeetingSchedulerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("MeetingScheduler.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("MeetingId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("MeetingScheduler.Models.Exclusion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Exclusion");
                });

            modelBuilder.Entity("MeetingScheduler.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("MeetingScheduler.Models.MeetingUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("equipmentNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("importantNotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("MeetingUser");
                });

            modelBuilder.Entity("MeetingScheduler.Models.Preference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Preference");
                });

            modelBuilder.Entity("MeetingScheduler.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("closedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("openedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("MeetingScheduler.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<bool>("isImportant")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MeetingScheduler.Models.Comment", b =>
                {
                    b.HasOne("MeetingScheduler.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("MeetingScheduler.Models.Meeting", "Meeting")
                        .WithMany("Comments")
                        .HasForeignKey("MeetingId");

                    b.Navigation("Author");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("MeetingScheduler.Models.Exclusion", b =>
                {
                    b.HasOne("MeetingScheduler.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeetingScheduler.Models.Meeting", b =>
                {
                    b.HasOne("MeetingScheduler.Models.Room", null)
                        .WithMany("Meetings")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("MeetingScheduler.Models.MeetingUser", b =>
                {
                    b.HasOne("MeetingScheduler.Models.Meeting", "Meeting")
                        .WithMany("MeetingUsers")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeetingScheduler.Models.User", "User")
                        .WithMany("MeetingUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeetingScheduler.Models.Preference", b =>
                {
                    b.HasOne("MeetingScheduler.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeetingScheduler.Models.Meeting", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("MeetingUsers");
                });

            modelBuilder.Entity("MeetingScheduler.Models.Room", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("MeetingScheduler.Models.User", b =>
                {
                    b.Navigation("MeetingUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
